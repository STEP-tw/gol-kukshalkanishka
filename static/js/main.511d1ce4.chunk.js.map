{"version":3,"sources":["_src/GOLLib.js","Cell.js","App.js","serviceWorker.js","index.js","_src/gameOfLife.js"],"names":["world","generateGrid","_ref","length","breadth","grid","Array","fill","map","x","this","slice","calculateGridSize","createLabelledGrid","dimensions","counter","rows","col","fetchNeighbours","row","column","points","neighbour","forEach","y","push","filter","fetchNeighboursState","_this","provideNeighbourState","isCellValid","_ref2","undefined","calculateAliveNeighbours","reduce","state1","state2","lifeZones","0","1","2","3","calculateNextState","aliveNeighbours","changeLifeZone","nextGeneration","_this$calculateGridSi","value","runWorld","iteration","updateWorld","aliveCells","_this2","cell","exports","Cell","react_default","a","createElement","width","height","props","color","stroke","strokeWidth","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","gen","timerID","setInterval","tick","setState","topLeft","bottomRight","cells","colors","i","j","src_Cell","concat","genCells","join","toColourLookup","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","require","module","currGeneration","_ref3","alivePositions","aliveCellsPos","calculateAliveCellsPos"],"mappings":"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","file":"static/js/main.511d1ce4.chunk.js","sourcesContent":["let world = { generateGrid : function({length, breadth}) {\n  let rows = new Array(breadth).fill(0);\n  let grid = rows.map((x) => new Array(length).fill(0));\n  this.grid= grid.map((x)=>x.slice());\n  return grid;\n}, \n\n  grid : [], \n\n  calculateGridSize: function() { \n    let breadth=this.grid.length;\n    let length=this.grid[0].length;\n    return {length,breadth};\n  }, \n\n  createLabelledGrid : function(dimensions) {\n    let grid = this.generateGrid(dimensions);\n    let counter = 1;\n    return grid.map((rows)=>rows.map((col) => counter++));\n  },\n\n  fetchNeighbours : function(row, column){\n    let points = [-1, 0, 1];\n    let neighbour=[];\n\n    points.forEach((x)=> {\n      points.forEach((y) =>{\n        neighbour.push([row+x, column+y]);\n      });\n    });\n\n    return neighbour.filter((x)=>{ return !(x[0] ==row && x[1] == column)});\n  },\n\n  fetchNeighboursState : function(row,column) {\n    return this.fetchNeighbours(row,column).map((x)=> this.provideNeighbourState( x[0],x[1])).map((x)=> 0+x);\n  },\n\n  provideNeighbourState : function(row,column){\n    let grid = this.grid;\n    if(this.isCellValid({row,column})){\n      return this.grid[row][column];\n    }\n    return 0;\n  },\n\n  isCellValid : function({row,column}){\n    let grid = this.grid;\n    return ((grid[row] != undefined && grid[row][column]!=undefined));\n  },\n\n  calculateAliveNeighbours : function(row,column){\n    let neighbourStates = this.fetchNeighboursState(row,column);\n    return neighbourStates.reduce((state1,state2)=>state1+state2);\n  },\n\n  lifeZones : {0 : function() {\n    return 0;\n  },\n    1: function() { \n      return 0;\n    },\n    2 : function(row, column){\n      return world.grid[row][column];\n    },\n    3 : function() { \n      return 1;\n    }\n  },\n\n  calculateNextState : function(row, column) { \n    let aliveNeighbours = this.calculateAliveNeighbours(row, column);\n    if(aliveNeighbours > 3) {\n      return 0;\n    }\n    let nextState = this.lifeZones[aliveNeighbours](row,column);\n    return nextState;\n  },\n\n  changeLifeZone : function() {\n    let nextGeneration = [];\n    let {length, breadth} = this.calculateGridSize();\n    nextGeneration = this.grid.map((value)=>value.slice());\n\n    for(let row=0; row < breadth; row++){\n      for(let column=0; column < length; column++){\n        nextGeneration[row][column] = this.calculateNextState(row, column); \n      }\n    }\n    this.grid=nextGeneration;\n  },\n\n  runWorld : function(iteration) { \n    while(iteration != 0){\n      this.changeLifeZone();\n      iteration--;\n    }\n    return this.grid;\n  },\n\n  updateWorld : function(aliveCells){\n    let grid = this.grid;\n    aliveCells.map((cell) =>{ \n      if(this.isCellValid({row : cell[0],column : cell[1]})) {\n        grid[cell[0]][cell[1]] = 1;\n      }\n    });\n    this.grid = grid;\n    return grid;\n  }\n};\n\nexports.world = world;\n","import React, { Component } from 'react';\n\nclass Cell extends Component {\n  render() {\n    return <rect width=\"10\" \n    height=\"10\"\n    fill={this.props.color || \"white\"}\n    x={this.props.col*10} \n    y={this.props.row*10} \n    stroke=\"lightgray\" \n    strokeWidth={1}></rect>\n  }\n}\n\nexport default Cell;","import React, { Component } from 'react';\nimport Cell from './Cell';\nimport {nextGeneration} from './_src/gameOfLife.js';\n\nconst genId = (a) => a.join(\"_\");\n\nconst genCells = (colors) => {\n  let cells = [];\n  for(let i=0;i<17;i++) {\n    for(let j=0;j<17;j++) {\n      cells.push(<Cell row={i} col={j} color={colors[`${i}_${j}`]}/>);\n    }\n  }\n  return cells;\n}\n\nconst toColourLookup=(cells) => {\n  let colors={};\n  cells.forEach(cell => {\n    colors[genId(cell)]=\"black\"\n  });\n  return colors;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {gen: this.props.gen};\n  }\n  componentDidMount() {\n    this.timerID = setInterval(()=>this.tick(),180)\n  }\n  tick() {\n    this.setState((state,props)=>{\n      let newState=nextGeneration(state.gen,{topLeft:[0,0],bottomRight:[17,17]});\n      return {gen:newState};\n    });\n  }\n  render() {\n    let colors=toColourLookup(this.state.gen)\n    let cells=genCells(colors);\n    return (\n      <div className=\"App\">\n        <svg width={800} height={800}>\n          {cells}\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst coords=[ [ 1, 5 ],\n[ 1, 11 ],\n[ 2, 5 ],\n[ 2, 11 ],\n[ 3, 5 ],\n[ 3, 6 ],\n[ 3, 10 ],\n[ 3, 11 ],\n[ 5, 1 ],\n[ 5, 2 ],\n[ 5, 3 ],\n[ 5, 6 ],\n[ 5, 7 ],\n[ 5, 9 ],\n[ 5, 10 ],\n[ 5, 13 ],\n[ 5, 14 ],\n[ 5, 15 ],\n[ 6, 3 ],\n[ 6, 5 ],\n[ 6, 7 ],\n[ 6, 9 ],\n[ 6, 11 ],\n[ 6, 13 ],\n[ 7, 5 ],\n[ 7, 6 ],\n[ 7, 10 ],\n[ 7, 11 ],\n[ 9, 5 ],\n[ 9, 6 ],\n[ 9, 10 ],\n[ 9, 11 ],\n[ 10, 3 ],\n[ 10, 5 ],\n[ 10, 7 ],\n[ 10, 9 ],\n[ 10, 11 ],\n[ 10, 13 ],\n[ 11, 1 ],\n[ 11, 2 ],\n[ 11, 3 ],\n[ 11, 6 ],\n[ 11, 7 ],\n[ 11, 9 ],\n[ 11, 10 ],\n[ 11, 13 ],\n[ 11, 14 ],\n[ 11, 15 ],\n[ 13, 5 ],\n[ 13, 6 ],\n[ 13, 10 ],\n[ 13, 11 ],\n[ 14, 5 ],\n[ 14, 11 ],\n[ 15, 5 ],\n[ 15, 11 ] ];\nReactDOM.render(<App gen={coords}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const {world} = require('./GOLLib.js');\n\nconst calculateAliveCellsPos = function(grid, {length, breadth}) {\n  let aliveCellsPos =[];\n  for(let row = 0; row < breadth; row++) {\n    for(let column = 0; column < length; column++){\n      if(grid[row][column]==1){\n        aliveCellsPos.push([row,column]);\n      }\n    }\n  }\n  return aliveCellsPos;\n}\n\nconst updateWorld = function(currGeneration, {topLeft, bottomRight}) {\n  let aliveCells = currGeneration.map(\n    (cell)=>[cell[0]-topLeft[0],cell[1]-topLeft[1]]\n  );\n  world.updateWorld(aliveCells);\n  return;\n}\n\nconst nextGeneration = function(currGeneration,{topLeft,bottomRight}) {\n  let breadth = bottomRight[0]-topLeft[0] +1;\n  let length = bottomRight[1]-topLeft[1] +1;\n  world.generateGrid({length,breadth});\n  updateWorld(currGeneration, {topLeft, bottomRight});\n  let newGeneration = world.runWorld(1);\n  let alivePositions=calculateAliveCellsPos(newGeneration, {length, breadth});\n  alivePositions=alivePositions.map(\n    (cell)=>[cell[0]+topLeft[0],cell[1]+topLeft[1]]\n  );\n  return alivePositions;\n}\n\nmodule.exports = { nextGeneration };\n"],"sourceRoot":""}